@model DynamicLinqWebDocs.ViewModels.Class
@using DynamicLinqWebDocs.Models;

@{
    var title = Model.Name + " Class";

    ViewBag.Title = title + " (" + Model.Namespace + ")";
    
    int[] s;
}

<td>@Html.ActionLink("Back", "Index", "Class")</td>

<h2>@title</h2>

@Html.FormatMarkdown(Model.Description)

@Html.FormatMarkdown("**Namespace**: `{0}`", Model.Namespace)

@if (Model.Methods.Count > 0) { 
<h3>Methods</h3>
<table class="table">
    <thead>
        <tr>
            <th>Name</th>
            <th>Description</th>
            <th>Supported Frameworks</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var methodGroup in Model.Methods.OrderBy(x => x.Name).GroupBy(x => new { x.Name, x.Frameworks }))
        {
            int methodCount = 0;

            foreach (var method in methodGroup)
            {
                var linkName = method.Name + "(" + String.Join(", ", method.Arguments.Select(x => x.Type)) + ")";
                Frameworks? framework = null;

                if (method.Frameworks != Frameworks.All)
                {
                    framework = Enum.GetValues(typeof(Frameworks)).Cast<Frameworks>().Reverse().Where(x => method.Frameworks.HasFlag(x)).FirstOrDefault();
                }
            
                <tr>
                    <td>@Html.ActionLink(linkName, "Method", "Class", new { className = Model.Name, methodName = method.Name.Replace('<', '(').Replace('>', ')'), framework = framework, o = methodCount > 0 ? (int?)methodCount : null }, null)</td>
                    <td>@Html.FormatMarkdown(method.Description)</td>
                    <td>@Helpers.GetEnumDescription(method.Frameworks)</td>
                </tr>
            
                methodCount++;
            }
        }
    </tbody>
</table>
}

@Html.DisplayFor(x => x.Remarks, "Remarks")